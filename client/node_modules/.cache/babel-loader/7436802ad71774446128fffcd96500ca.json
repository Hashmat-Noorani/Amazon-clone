{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import { auth, provider } from \"../db/firebase\";\n// import { signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\n// import { STATUS } from \"../utils/enums\";\n// import { getItem, removeItem, setItem } from \"../utils/localstorage\";\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: {\n//     user: getItem(\"user\") || null,\n//     status: STATUS.IDLE,\n//   },\n//   reducers: {\n//     login: (state, action) => ({\n//       ...state,\n//       user: action.payload,\n//     }),\n//     logout: (state, action) => ({\n//       ...state,\n//       user: null,\n//     }),\n//     setStatus: (state, action) => ({\n//       ...state,\n//       status: action.payload,\n//     }),\n//   },\n// });\n// export const { login, logout, setStatus } = authSlice.actions;\n// export default authSlice.reducer;\n// export const loginWithGoogle = () => (dispatch) => {\n//   dispatch(setStatus(STATUS.LOADING));\n//   signInWithPopup(auth, provider)\n//     .then((result) => {\n//       // This gives you a Google Access Token. You can use it to access the Google API.\n//       const credential = GoogleAuthProvider.credentialFromResult(result);\n//       const token = credential.accessToken;\n//       // The signed-in user info.\n//       const user = result.user;\n//       const newUser = {\n//         name: user.displayName,\n//         email: user.email,\n//         phone: user.phoneNumber,\n//         avatar: user.photoURL,\n//       };\n//       setItem(\"user\", newUser);\n//       dispatch(login(newUser));\n//       dispatch(setStatus(STATUS.IDLE));\n//     })\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\n// };\n// export const logoutWithGoogle = () => (dispatch) => {\n//   dispatch(setStatus(STATUS.LOADING));\n//   signOut(auth)\n//     .then(() => {\n//       removeItem(\"user\");\n//       dispatch(logout());\n//       dispatch(setStatus(STATUS.IDLE));\n//     })\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\n// };","map":{"version":3,"names":[],"sources":["D:/EDU/PROJECTS/Clones/amazon-clone/client/src/redux/authSlice.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// import { auth, provider } from \"../db/firebase\";\r\n// import { signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\r\n// import { STATUS } from \"../utils/enums\";\r\n// import { getItem, removeItem, setItem } from \"../utils/localstorage\";\r\n\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState: {\r\n//     user: getItem(\"user\") || null,\r\n//     status: STATUS.IDLE,\r\n//   },\r\n\r\n//   reducers: {\r\n//     login: (state, action) => ({\r\n//       ...state,\r\n//       user: action.payload,\r\n//     }),\r\n\r\n//     logout: (state, action) => ({\r\n//       ...state,\r\n//       user: null,\r\n//     }),\r\n\r\n//     setStatus: (state, action) => ({\r\n//       ...state,\r\n//       status: action.payload,\r\n//     }),\r\n//   },\r\n// });\r\n\r\n// export const { login, logout, setStatus } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n\r\n// export const loginWithGoogle = () => (dispatch) => {\r\n//   dispatch(setStatus(STATUS.LOADING));\r\n//   signInWithPopup(auth, provider)\r\n//     .then((result) => {\r\n//       // This gives you a Google Access Token. You can use it to access the Google API.\r\n//       const credential = GoogleAuthProvider.credentialFromResult(result);\r\n//       const token = credential.accessToken;\r\n//       // The signed-in user info.\r\n//       const user = result.user;\r\n//       const newUser = {\r\n//         name: user.displayName,\r\n//         email: user.email,\r\n//         phone: user.phoneNumber,\r\n//         avatar: user.photoURL,\r\n//       };\r\n//       setItem(\"user\", newUser);\r\n//       dispatch(login(newUser));\r\n//       dispatch(setStatus(STATUS.IDLE));\r\n//     })\r\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n// };\r\n\r\n// export const logoutWithGoogle = () => (dispatch) => {\r\n//   dispatch(setStatus(STATUS.LOADING));\r\n\r\n//   signOut(auth)\r\n//     .then(() => {\r\n//       removeItem(\"user\");\r\n//       dispatch(logout());\r\n//       dispatch(setStatus(STATUS.IDLE));\r\n//     })\r\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n// };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}