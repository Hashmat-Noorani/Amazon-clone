{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import { STATUS } from \"../utils/enums\";\n// import { db } from \"../db/firebase\";\n// import {\n//   doc,\n//   setDoc,\n//   getDoc,\n//   getDocs,\n//   updateDoc,\n//   deleteDoc,\n//   collection,\n//   query,\n//   where,\n//   onSnapshot,\n//   arrayUnion,\n// } from \"firebase/firestore\";\n// import { getItem, setItem } from \"../utils/localstorage\";\n// // import firebase from \"firbase\";\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialState: {\n//     cartItems: [],\n//     status: STATUS.IDLE,\n//   },\n//   reducers: {\n//     setCartItems: (state, action) => ({\n//       ...state,\n//       cartItems: action.payload,\n//     }),\n//     // In redux toolkit we can directly mutate the state also\n//     // setCartItems: (state, action) => {\n//     //   state.cartItems = action.payload;\n//     // },\n//     setStatus: (state, action) => ({\n//       ...state,\n//       status: action.payload,\n//     }),\n//   },\n// });\n// export const { setCartItems, setStatus } = cartSlice.actions;\n// export default cartSlice.reducer;\n// const cartItemsColl = collection(db, \"cartitems\");\n// export const fetchCartItems = (email) => (dispatch) => {\n//   dispatch(setStatus(STATUS.LOADING));\n//   if (!email) {\n//     dispatch(setCartItems(getItem(\"ls_cartData\") || []));\n//     dispatch(setStatus(STATUS.IDLE));\n//   } else {\n//     onSnapshot(\n//       cartItemsColl,\n//       (snapshot) => {\n//         let payload = [];\n//         console.log(snapshot.docs); //array of cart docs\n//         snapshot.docs.map((productDoc) => {\n//           const filter = productDoc\n//             .data()\n//             .users.filter((el) => el.email === email);\n//           console.log(filter);\n//           if (filter.length) {\n//             // const test = [...payload];\n//             // getDoc(doc(db, \"products\", productDoc.id)).then((snap) => {\n//             //   // store\n//             //   // payload.push(snap.data());\n//             //   // test.push(snap.data());\n//             //   // console.log(payload);\n//             //   testing(snap.data());\n//             // });\n//             onSnapshot(doc(db, \"products\", productDoc.id), (d) => {\n//               payload = Object.assign([], payload);\n//               payload.push({ cartQty: filter[0].qty, ...d.data() });\n//             });\n//             //   console.log(d.data());\n//             //\n//             //   payload.push(d.data());\n//             // payload = [\n//             //   ...payload,\n//             //   // {\n//             //   //   ...d.data(),\n//             //   //   cartQty: filter[0].qty,\n//             //   // },\n//             // ];\n//             // });\n//           }\n//         });\n//         console.log(payload);\n//         dispatch(setCartItems(payload));\n//       },\n//       (err) => dispatch(setStatus(STATUS.ERROR))\n//     );\n//   }\n// };\n// // console.log(payload);\n// // console.log(ids);\n// // console.log(ids);\n// // const idsFilter = query(\n// //   collection(db, \"products\"),\n// //   where(\"__name__\", \"in\", ids)\n// // );\n// // onSnapshot(idsFilter, (snapshot) => {\n// //   const payload = snapshot.docs.map((doc) => ({\n// //     id: doc.id,\n// //     ...doc.data(),\n// //   }));\n// // dispatch(setCartItems(payload));\n// // dispatch(setStatus(STATUS.IDLE));\n// // (err) => () => dispatch(setStatus(STATUS.ERROR))\n// // );\n// // }\n// // getDocs(q)\n// //   .then((snapshot) => {\n// //     // dispatch(setProducts(payload));\n// //     snapshot.docs.map((doc) => {\n// //       console.log(doc.id);\n// // onSnapshot(doc(db, \"products\", doc.id), (doc) => console.log(doc));\n// // .then((docSnap) =>\n// //   console.log(docSnap.data())\n// // );\n// // const productsColl = collection(db, \"products\");\n// // const q2 = query(productsColl, where(\"id\", \"==\", doc.id));\n// // getDocs(q2).then((snapshot) => {\n// //   const payload = snapshot.docs.map((pro) => ({\n// //     id: pro.id,\n// //     ...pro.data(),\n// //   }));\n// // });\n// // id: doc.id,\n// // ...doc.data(),\n// // });\n// // console.log(payload1);\n// //\n// //   },)\n// //   // .catch(() => dispatch(setStatus(STATUS.ERROR)));\n// // }\n// // let payload = [];\n// // const store = (payload, data) => {\n// //   if (data) payload.push(data);\n// //   return payload;\n// // };\n// export const addToCart = (id, email) => {\n//   return function addTocartThunk(dispatch) {\n//     dispatch(setStatus(STATUS.LOADING));\n//     if (email) {\n//       const cartItemDoc = doc(db, \"cartitems\", id);\n//       getDoc(cartItemDoc)\n//         .then((docSnap) => {\n//           if (docSnap.exists()) {\n//             const idx = docSnap\n//               .data()\n//               .users.findIndex((el) => el.email === email);\n//             console.log(idx);\n//             if (idx > -1) {\n//               const updatedData = docSnap\n//                 .data()\n//                 .users.map((el, i) =>\n//                   i === idx ? { ...el, qty: (el.qty += 1) } : el\n//                 );\n//               updateDoc(cartItemDoc, {\n//                 users: updatedData,\n//               });\n//             } else {\n//               updateDoc(cartItemDoc, {\n//                 users: arrayUnion({\n//                   email,\n//                   qty: 1,\n//                   id,\n//                 }),\n//               });\n//             }\n//           } else {\n//             setDoc(doc(cartItemsColl, id), {\n//               users: [\n//                 {\n//                   email,\n//                   qty: 1,\n//                   id,\n//                 },\n//               ],\n//             });\n//           }\n//           dispatch(fetchCartItems(email));\n//         })\n//         .catch(() => dispatch(setStatus(STATUS.ERROR)));\n//     } else {\n//       let flag = false;\n//       let ls_cartData = getItem(\"ls_cartData\") || [];\n//       if (ls_cartData.length) {\n//         ls_cartData.forEach((item) => {\n//           if (item.id == id) {\n//             item.qty += 1;\n//             flag = true;\n//           }\n//         });\n//       }\n//       !flag && ls_cartData.push({ id, qty: 1 });\n//       setItem(\"ls_cartData\", ls_cartData);\n//       dispatch(fetchCartItems(email));\n//     }\n//   };\n// };\n// export const changeCartItemQty = (id, newQty, email) => (dispatch) => {\n//   console.log(newQty);\n//   const qtyItemDoc = doc(db, \"cartitems\", id);\n//   dispatch(setStatus(STATUS.LOADING));\n//   updateDoc(qtyItemDoc, { qty: +newQty })\n//     .then(() => {\n//       dispatch(fetchCartItems(email));\n//     })\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\n// };\n// export const deleteFromCart = (id, email) => (dispatch) => {\n//   const qtyItemDoc = doc(db, \"cartitems\", id);\n//   dispatch(setStatus(STATUS.LOADING));\n//   deleteDoc(qtyItemDoc)\n//     .then(() => {\n//       dispatch(fetchCartItems(email));\n//     })\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\n// };","map":{"version":3,"names":[],"sources":["D:/EDU/PROJECTS/Clones/amazon-clone/client/src/redux/cartSlice.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// import { STATUS } from \"../utils/enums\";\r\n// import { db } from \"../db/firebase\";\r\n// import {\r\n//   doc,\r\n//   setDoc,\r\n//   getDoc,\r\n//   getDocs,\r\n//   updateDoc,\r\n//   deleteDoc,\r\n//   collection,\r\n//   query,\r\n//   where,\r\n//   onSnapshot,\r\n//   arrayUnion,\r\n// } from \"firebase/firestore\";\r\n// import { getItem, setItem } from \"../utils/localstorage\";\r\n// // import firebase from \"firbase\";\r\n// const cartSlice = createSlice({\r\n//   name: \"cart\",\r\n//   initialState: {\r\n//     cartItems: [],\r\n//     status: STATUS.IDLE,\r\n//   },\r\n//   reducers: {\r\n//     setCartItems: (state, action) => ({\r\n//       ...state,\r\n//       cartItems: action.payload,\r\n//     }),\r\n\r\n//     // In redux toolkit we can directly mutate the state also\r\n//     // setCartItems: (state, action) => {\r\n//     //   state.cartItems = action.payload;\r\n//     // },\r\n\r\n//     setStatus: (state, action) => ({\r\n//       ...state,\r\n//       status: action.payload,\r\n//     }),\r\n//   },\r\n// });\r\n\r\n// export const { setCartItems, setStatus } = cartSlice.actions;\r\n\r\n// export default cartSlice.reducer;\r\n\r\n// const cartItemsColl = collection(db, \"cartitems\");\r\n\r\n// export const fetchCartItems = (email) => (dispatch) => {\r\n//   dispatch(setStatus(STATUS.LOADING));\r\n//   if (!email) {\r\n//     dispatch(setCartItems(getItem(\"ls_cartData\") || []));\r\n//     dispatch(setStatus(STATUS.IDLE));\r\n//   } else {\r\n//     onSnapshot(\r\n//       cartItemsColl,\r\n//       (snapshot) => {\r\n//         let payload = [];\r\n//         console.log(snapshot.docs); //array of cart docs\r\n//         snapshot.docs.map((productDoc) => {\r\n//           const filter = productDoc\r\n//             .data()\r\n//             .users.filter((el) => el.email === email);\r\n\r\n//           console.log(filter);\r\n//           if (filter.length) {\r\n//             // const test = [...payload];\r\n//             // getDoc(doc(db, \"products\", productDoc.id)).then((snap) => {\r\n//             //   // store\r\n//             //   // payload.push(snap.data());\r\n//             //   // test.push(snap.data());\r\n//             //   // console.log(payload);\r\n//             //   testing(snap.data());\r\n//             // });\r\n//             onSnapshot(doc(db, \"products\", productDoc.id), (d) => {\r\n//               payload = Object.assign([], payload);\r\n//               payload.push({ cartQty: filter[0].qty, ...d.data() });\r\n//             });\r\n//             //   console.log(d.data());\r\n//             //\r\n//             //   payload.push(d.data());\r\n//             // payload = [\r\n//             //   ...payload,\r\n//             //   // {\r\n//             //   //   ...d.data(),\r\n//             //   //   cartQty: filter[0].qty,\r\n//             //   // },\r\n//             // ];\r\n//             // });\r\n//           }\r\n//         });\r\n//         console.log(payload);\r\n//         dispatch(setCartItems(payload));\r\n//       },\r\n//       (err) => dispatch(setStatus(STATUS.ERROR))\r\n//     );\r\n//   }\r\n// };\r\n\r\n// // console.log(payload);\r\n// // console.log(ids);\r\n// // console.log(ids);\r\n// // const idsFilter = query(\r\n// //   collection(db, \"products\"),\r\n// //   where(\"__name__\", \"in\", ids)\r\n// // );\r\n// // onSnapshot(idsFilter, (snapshot) => {\r\n// //   const payload = snapshot.docs.map((doc) => ({\r\n// //     id: doc.id,\r\n// //     ...doc.data(),\r\n// //   }));\r\n// // dispatch(setCartItems(payload));\r\n// // dispatch(setStatus(STATUS.IDLE));\r\n// // (err) => () => dispatch(setStatus(STATUS.ERROR))\r\n// // );\r\n// // }\r\n// // getDocs(q)\r\n// //   .then((snapshot) => {\r\n// //     // dispatch(setProducts(payload));\r\n\r\n// //     snapshot.docs.map((doc) => {\r\n// //       console.log(doc.id);\r\n// // onSnapshot(doc(db, \"products\", doc.id), (doc) => console.log(doc));\r\n// // .then((docSnap) =>\r\n// //   console.log(docSnap.data())\r\n// // );\r\n// // const productsColl = collection(db, \"products\");\r\n// // const q2 = query(productsColl, where(\"id\", \"==\", doc.id));\r\n// // getDocs(q2).then((snapshot) => {\r\n// //   const payload = snapshot.docs.map((pro) => ({\r\n// //     id: pro.id,\r\n// //     ...pro.data(),\r\n// //   }));\r\n\r\n// // });\r\n\r\n// // id: doc.id,\r\n\r\n// // ...doc.data(),\r\n// // });\r\n// // console.log(payload1);\r\n// //\r\n// //   },)\r\n// //   // .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n// // }\r\n\r\n// // let payload = [];\r\n// // const store = (payload, data) => {\r\n// //   if (data) payload.push(data);\r\n// //   return payload;\r\n// // };\r\n\r\n// export const addToCart = (id, email) => {\r\n//   return function addTocartThunk(dispatch) {\r\n//     dispatch(setStatus(STATUS.LOADING));\r\n//     if (email) {\r\n//       const cartItemDoc = doc(db, \"cartitems\", id);\r\n//       getDoc(cartItemDoc)\r\n//         .then((docSnap) => {\r\n//           if (docSnap.exists()) {\r\n//             const idx = docSnap\r\n//               .data()\r\n//               .users.findIndex((el) => el.email === email);\r\n//             console.log(idx);\r\n//             if (idx > -1) {\r\n//               const updatedData = docSnap\r\n//                 .data()\r\n//                 .users.map((el, i) =>\r\n//                   i === idx ? { ...el, qty: (el.qty += 1) } : el\r\n//                 );\r\n//               updateDoc(cartItemDoc, {\r\n//                 users: updatedData,\r\n//               });\r\n//             } else {\r\n//               updateDoc(cartItemDoc, {\r\n//                 users: arrayUnion({\r\n//                   email,\r\n//                   qty: 1,\r\n//                   id,\r\n//                 }),\r\n//               });\r\n//             }\r\n//           } else {\r\n//             setDoc(doc(cartItemsColl, id), {\r\n//               users: [\r\n//                 {\r\n//                   email,\r\n//                   qty: 1,\r\n//                   id,\r\n//                 },\r\n//               ],\r\n//             });\r\n//           }\r\n//           dispatch(fetchCartItems(email));\r\n//         })\r\n//         .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n//     } else {\r\n//       let flag = false;\r\n//       let ls_cartData = getItem(\"ls_cartData\") || [];\r\n//       if (ls_cartData.length) {\r\n//         ls_cartData.forEach((item) => {\r\n//           if (item.id == id) {\r\n//             item.qty += 1;\r\n//             flag = true;\r\n//           }\r\n//         });\r\n//       }\r\n//       !flag && ls_cartData.push({ id, qty: 1 });\r\n//       setItem(\"ls_cartData\", ls_cartData);\r\n//       dispatch(fetchCartItems(email));\r\n//     }\r\n//   };\r\n// };\r\n\r\n// export const changeCartItemQty = (id, newQty, email) => (dispatch) => {\r\n//   console.log(newQty);\r\n//   const qtyItemDoc = doc(db, \"cartitems\", id);\r\n//   dispatch(setStatus(STATUS.LOADING));\r\n//   updateDoc(qtyItemDoc, { qty: +newQty })\r\n//     .then(() => {\r\n//       dispatch(fetchCartItems(email));\r\n//     })\r\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n// };\r\n\r\n// export const deleteFromCart = (id, email) => (dispatch) => {\r\n//   const qtyItemDoc = doc(db, \"cartitems\", id);\r\n//   dispatch(setStatus(STATUS.LOADING));\r\n//   deleteDoc(qtyItemDoc)\r\n//     .then(() => {\r\n//       dispatch(fetchCartItems(email));\r\n//     })\r\n//     .catch(() => dispatch(setStatus(STATUS.ERROR)));\r\n// };\r\n"],"mappings},"metadata":{},"sourceType":"module"}